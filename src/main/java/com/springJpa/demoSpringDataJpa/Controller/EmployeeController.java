package com.springJpa.demoSpringDataJpa.Controller;import com.springJpa.demoSpringDataJpa.model.Employee;import com.springJpa.demoSpringDataJpa.repository.EmployeeRepository;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.http.HttpStatus;import org.springframework.http.ResponseEntity;import org.springframework.web.bind.annotation.*;import java.util.ArrayList;import java.util.List;import java.util.Optional;@RestController@RequestMapping("/api")public class EmployeeController {    @Autowired    EmployeeRepository employeeRepository;    @PostMapping("/employees")    public String createNewEmp(@RequestBody Employee employee){     employeeRepository.save(employee);     return "Employee Created in db";    }    @GetMapping("/employees")    public ResponseEntity<List<Employee>> getempList() {        List<Employee> empList = new ArrayList<>();        employeeRepository.findAll().forEach(empList::add);        return new ResponseEntity<List<Employee>>(empList , HttpStatus.OK);    }    @GetMapping("/employees/{empId}")    public ResponseEntity<Employee> getEmployeebyId(@PathVariable long empId){       Optional<Employee> emp = employeeRepository.findById(empId);       if(emp.isPresent()) {           return new ResponseEntity<Employee>(emp.get(), HttpStatus.FOUND);       }       else           return new ResponseEntity<Employee>(HttpStatus.NOT_FOUND);    }//    @GetMapping("/employees/{emp_city}")//    public List<Employee> getEmployeeByCity(String emp_city){//        Optional<List<Employee>> empList = employeeRepository.findByCity(emp_city);//        employeeRepository.findByCity(emp_city).forEach(empList::add);//        return new ResponseEntity<List<Employee>>(empList , HttpStatus.OK);//    }    @PutMapping("/employees/{empId}")    public String updateEmployeeById(@PathVariable long empId, @RequestBody Employee employee){        Optional<Employee> emp = employeeRepository.findById(empId);        if(emp.isPresent()) {            Employee empExist = emp.get();            empExist.setEmp_age(employee.getEmp_age());            empExist.setEmp_city(employee.getEmp_city());            empExist.setEmp_name(employee.getEmp_name());            empExist.setSalary(employee.getSalary());            employeeRepository.save(empExist);            return "Employee " + empId + "have been updates in DB";        } else {            return "We didnt got any " + empId + "in the DB";        }    }    @DeleteMapping("/employees/{empId}")    public String deleteEmployeebyEmpId(@PathVariable long empId) {      employeeRepository.deleteById(empId);      return "Employee " + empId +  " have been deleted ";    }}